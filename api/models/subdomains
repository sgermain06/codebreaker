const Mongoose = require('mongoose');
const Schema = Mongoose.Schema;
const Domain = require('./domain');
const Vulnerability = require('./vulnerability');

const schema = new Schema({
    domain: {
        type: Schema.Types.ObjectId,
        ref: Mongoose.model('domains', Domain.schema),
    },
    name: String,
    ipAddress: String,
    vulnerabilities: [{
        type: Schema.Types.ObjectId,
        ref: Mongoose.model('vulnerabilities', Vulnerability.schema),
    }],
});

const findByDomainId = async (domainId, { page, size }) => {
    const match = { domain: domainId };

    const query = {
        records: [
            { $match: match },
            { $skip: (Math.max(page, 1) - 1) * size },
            { $limit: size }
        ],
        totalRecords: [
            { $match: match },
            { $count: 'totalRecords' }
        ]
    };

    const results = await Vulnerabilities.Subdomain([{ '$facet': query }]);
    const { records, totalRecords } = results[0];
    return { totalRecords: get(totalRecords, '0.totalRecords', 0), records };
};

const findByVulnerabilityId = async (vulnerabilityId, { page, size, search }) => {
    await Subdomain.findOne({ vulnerabilities: vulnerabilityId });
};

const findByIpAddress = async ipAddress => await Subdomain.findOne({ ipAddress });

const getAll = async ({ page, size, search }) => {

    const fields = Object.keys(Vulnerabilities.schema.obj);

    const match = {};
    if (!isEmpty(search)) {
        const regexp = new RegExp(search, 'i');
        match['$or'] = fields.map(field => ({ [field]: regexp }));
    }

    const query = {
        records: [
            { $match: match },
            { $skip: (Math.max(page, 1) - 1) * size },
            { $limit: size }
        ],
        totalRecords: [
            { $match: match },
            { $count: 'totalRecords' }
        ]
    };

    const results = await Vulnerabilities.aggregate([{ '$facet': query }]);
    const { records, totalRecords } = results[0];
    return { totalRecords: get(totalRecords, '0.totalRecords', 0), records };
};

module.exports = {
    schema,
    findByDomainId,
    findByVulnerabilityId,
    findByIpAddress,
    getAll,
};